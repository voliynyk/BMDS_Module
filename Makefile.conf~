### Define the C and Fortran compilers here.  These values work for
### Windows using Mingw and on Linux systems.
CC = gcc
FC = gfortran

### Program to link everything into an executable
./LN = $(FC) -m32

### Linker flags
### Starting with version 4, gcc introduces dependencies on
### libgcc_s_dw2-1.dll and libgfortran-3.dll. The flags below
### fix this by statically linking in those symbols. This makes the
### binaries *much* bigger. So, better to just include the dependency
### dlls in the bmds dist.
### Uncomment below for gcc version 4+ on MinGW
#LMINGW =	-static-libgcc -static-libgfortran

### Extension for executable files: none for Unix/Linux, .exe for Windows
BINEXT = 
#BINEXT = .exe

### For production, strip the executables; they get a lot smaller
### For development, leave all the debugging information in place
STRIP = strip
#STRIP = echo

### How do we delete files?  On Unix/Linux and Windows with the 
### required tools, use rm -f.  On Windows without the tools, you can try
### del (but without the recommended tools, this makefile probably will not
### work, anyway.
### This gets used for make clean, etc.
RM = rm -f
# RM = del

### How do we copy files?  On Unix/Linux and Windows with the required
### tools, use cp.
CP = cp -p
#CP = copy

### Uncomment below if on Windows
#MORE_CFLAGS = -DWIN32

### gcc version 4+ has a problem where gcc's float.h does not "include_next"
### the MinGW float.h resulting in undefined symbols in some cases.
### Therefore, we need a way to point to the MinGW's include files. In
### the example below, "/mingw/include" points to the top level installed
### include directory, not the one below msys.
### Uncomment below if using gcc version 4+ on MinGW.
MORE_CFLAGS := $(MORE_CFLAGS) -isystem /mingw/include

### Uncomment below if using the GSL Library (needed for NLogistic Bootstrapping)
GSL_INCLUDE = -I$(BMDS_HOME)/Assist
GSL_LIB = -L$(BMDS_HOME)/Assist/gsl -lgsl -lgslcblas

### Uncomment below to make code for RBMDS.  This changes the precision of
### the output values (and makes really ugly printouts).
# MORE_CFLAGS := $(MORE_CFLAGS) -DRBMDS

# NEW Logging macro that will be used across models and will eventually
# replace the older logging macros below.
# Eventually the macro will be replaced by a runtime log level option
#MORE_CFLAGS := $(MORE_CFLAGS) -DDEBUG_LOG

# Obsolescent logging macros that will be replaced soon
### Uncomment one or more below to turn on logging for respective programs
### ms_combo logging: -DLOGGING_ON
#MORE_CFLAGS := $(MORE_CFLAGS) -DLOGGING_ON
### exponential logging: -DDO_LOG
# MORE_CFLAGS := $(MORE_CFLAGS) -DDO_LOG
### power logging: -DNO_LOG=false
# MORE_CFLAGS := $(MORE_CFLAGS) -DNO_LOG=false
### Enable misc output to std out and std error for various models
#MORE_CFLAGS := $(MORE_CFLAGS) -DMISC_OUT

### Default gnuplot terminal is windows.  Uncomment below to make gnuplot
### create its files for x11
MORE_CFLAGS := $(MORE_CFLAGS) -DTERM_X11

### So far, at least some programs run dramatically more slowly when optimzed
### on Linux. Optimization seems to work okay on Windows.
### Theoretically, debug symbols (-g) and optimization are mutually
### exclusive, but gcc allows it.
DEBUG_OPT_FLAGS =	-g -O0

### ----------------- No changes below here ------------------------------
BMDS_HOME = ..

### Assist uses its own definitions of these two flags
CFLAGS = -Wall $(DEBUG_OPT_FLAGS) -m32 -I$(BMDS_HOME)/Assist $(MORE_CFLAGS)
## These flags are for g77
##FFLAGS = -g -O3 -fno-automatic -finit-local-zeros -I$(BMDS_HOME)/Assist $(MORE_CFLAGS)
## These flags are for gfortran
FFLAGS = $(DEBUG_OPT_FLAGS) -m32 -fno-automatic -I$(BMDS_HOME)/Assist $(MORE_CFLAGS)

.PHONY : TAGS
